#ifndef BINNING_HPP
#define BINNING_HPP
  
  
#include "myh2/myh2.hpp"
#include "fitresults.hpp"
  


// which ttbar sample to use
#define POWHEG
//#define MADGRAPH

const double drawfactor = 1; // multiplied to predictions, so more events are drawn per experiment
const double lumi_factor = 1; // FH
// switch diffabsy sign of all wjets events for inverted asy contribution
const bool sys_invert_wjets = false; 

// switch diffabsy sign of all qcd events for inverted asy contribution
const bool sys_invert_qcd = false; 

// swaps the shapes of wplus and wminus in bg subtraction for systematic
const bool swapwjets = false;

// 0.8 means 80% of events are used for migmatrix, rest for unfolding test
const float splitfactor_training_test = 0.5; 

// makes the programs only read 10 events per sample for speed WARNING not implemented everywhere
const bool mini_data = false; 

// WARNING works only for old powheg at the moment
const bool random_split = false; 

// among other things: when true disables splitting of data, enables bg subtraction
const bool workingondata = true; 
const bool split_training_test_pseudo = !workingondata; 

// subtract bias distribution before regularisation
const bool use_bias_distribution = true; 

// makes pseudoexp. etc correct for slopes and offsets found in linchecks
const bool correct_for_lincheck = false; 

// when defined, number of pseudoexperiments is reduced in favor of doing rho-avg-tests
//#define FINDTAU 

//#define BINNING_M_ABSY_MANYYBINS
#define BINNING_Y_ABSY_MANYYBINS
//#define BINNING_PT_ABSY_MANYYBINS

// use this when creating migration matrix and selection efficiency to get the data for later 1d unfolding.
// will be saved alongside 2d data, won't overwrite it.
//#define BUILD_1D_BASIS

// use this to enable correct compilation of the special all-in-one program needed for
// calculating the pdf systematic
//#define DOPDFSYS


const char* nameOfSensVarGen = "diffabsy_gen";
const char* nameOfSensVarRec = "diffabsy_rec";
const char* nameOfSensVarShort = "diffabsy";
const char* nameOfSensVarGen_ZPrime = "diffabsy";
const char* labelOfSensVar = "|y_{t}|-|y_{#bar{t}}|";

const double pretty_sens_loweredge = -3;
const double pretty_sens_upperedge = 3;

/// /////////////////  
/// /////////////////

#ifdef BINNING_Y_ABSY_MANYYBINS

  // these need to be the names as they are called in the tuples
  const char* nameOfXAxisVarGen = "y_ttbar_gen";
  const char* nameOfXAxisVarRec = "y_ttbar_rec";
  const char* nameOfXAxisVarShort = "y";
  const char* labelOfXAxisVar = "|y_{t#bar{t}}|";
  const char* labelOfXAxisVar_noUnit = "|y_{t#bar{t}}|";
  const char* labelOfXAxisVar_noUnit_gen = "|y_{t#bar{t}, gen}|";
  const char* labelOfXAxisVar_noUnit_rec = "|y_{t#bar{t}, rec}|";
  const char* unitOfXAxisVar = "";
  
  const char* nameOfXAxisVarGen_ZPrime = "y_ttbar";
  
  
/////////  const char* fileSuffix = "yttbar/powheg_3mbins_manyybins_asymig_nosplit_overlap_flatinpresel";
  const char* fileSuffix = "";

//  #include "output/mttbar/powheg_3mbins_manyybins_asymig_nosplit_overlap/lincheck_fitresult.hpp" // WARNING needs changing

  #ifndef BUILD_1D_BASIS
    const int nbinsm = 6;
    const int nbinseta = 16;
    const int nbinsmafter = 3;
    const int nbinsetaafter = 8;  

    // flat in presel, powheg
    const double xedgesrec[] = {1.52767e-06, 0.148259, 0.302984, 0.470147, 0.663428, 0.923625, 2.48754};
    const double yedgesrec[][17] = {  {-2.7871, -0.264496, -0.209311, -0.164718, -0.126256, -0.0908594, -0.0593652, -0.0287071, 0, 0.0287071, 0.0593652, 0.0908594, 0.126256, 0.164718, 0.209311, 0.264496, 2.7871},
		 {-2.7871, -0.534287, -0.458199, -0.397162, -0.343092, -0.286514, -0.202901, -0.103123, 0, 0.103123, 0.202901, 0.286514, 0.343092, 0.397162, 0.458199, 0.534287, 2.7871},
		 {-2.7871, -0.798504, -0.692594, -0.600341, -0.477151, -0.345879, -0.220738, -0.107303, 0, 0.107303, 0.220738, 0.345879, 0.477151, 0.600341, 0.692594, 0.798504, 2.7871},
		 {-2.7871, -1.04265, -0.861492, -0.663887, -0.495546, -0.351175, -0.22464, -0.108976, 0, 0.108976, 0.22464, 0.351175, 0.495546, 0.663887, 0.861492, 1.04265, 2.7871},
		 {-2.7871, -1.17476, -0.857591, -0.649673, -0.484955, -0.342256, -0.219902, -0.107582, 0, 0.107582, 0.219902, 0.342256, 0.484955, 0.649673, 0.857591, 1.17476, 2.7871},
		 {-2.7871, -1.07164, -0.780109, -0.592537, -0.444821, -0.318287, -0.206803, -0.098942, 0, 0.098942, 0.206803, 0.318287, 0.444821, 0.592537, 0.780109, 1.07164, 2.7871}};

//   const double xedgesrec[] = {1.90124e-07, 0.147702, 0.300538, 0.467374, 0.660343, 0.919114, 2.33337};
//   const double yedgesrec[][17] = {  {-2.79228, -0.263312, -0.208862, -0.164186, -0.125932, -0.0910282, -0.0586378, -0.0284812, 0, 0.0284812, 0.0586378, 0.0910282, 0.125932, 0.164186, 0.208862, 0.263312, 2.79228},
//		 {-2.79228, -0.531091, -0.45542, -0.395666, -0.340937, -0.285091, -0.202719, -0.103035, 0, 0.103035, 0.202719, 0.285091, 0.340937, 0.395666, 0.45542, 0.531091, 2.79228},
//		 {-2.79228, -0.794123, -0.688575, -0.597268, -0.476083, -0.343171, -0.220869, -0.108899, 0, 0.108899, 0.220869, 0.343171, 0.476083, 0.597268, 0.688575, 0.794123, 2.79228},
//		 {-2.79228, -1.03593, -0.856112, -0.658698, -0.488928, -0.347359, -0.221707, -0.108061, 0, 0.108061, 0.221707, 0.347359, 0.488928, 0.658698, 0.856112, 1.03593, 2.79228},
//		 {-2.79228, -1.1641, -0.854995, -0.641944, -0.478038, -0.337586, -0.21696, -0.106107, 0, 0.106107, 0.21696, 0.337586, 0.478038, 0.641944, 0.854995, 1.1641, 2.79228},
//		 {-2.79228, -1.07475, -0.781837, -0.598106, -0.449277, -0.317482, -0.207187, -0.101639, 0, 0.101639, 0.207187, 0.317482, 0.449277, 0.598106, 0.781837, 1.07475, 2.79228}};

//    const double xedgesrec[] = {3.20722e-05, 0.149328, 0.304338, 0.47173, 0.665553, 0.929618, 2.38114};
//    const double yedgesrec[][17] = {  {-2.66866, -0.263396, -0.207355, -0.164389, -0.126494, -0.0899337, -0.057643, -0.0282877, 0, 0.0282877, 0.057643, 0.0899337, 0.126494, 0.164389, 0.207355, 0.263396, 2.66866},
//		 {-2.66866, -0.532397, -0.458208, -0.399498, -0.347192, -0.293552, -0.204686, -0.107013, 0, 0.107013, 0.204686, 0.293552, 0.347192, 0.399498, 0.458208, 0.532397, 2.66866},
//		 {-2.66866, -0.798462, -0.690915, -0.597512, -0.47342, -0.346658, -0.220431, -0.112884, 0, 0.112884, 0.220431, 0.346658, 0.47342, 0.597512, 0.690915, 0.798462, 2.66866},
//		 {-2.66866, -1.04531, -0.852902, -0.663428, -0.495569, -0.348793, -0.214827, -0.108081, 0, 0.108081, 0.214827, 0.348793, 0.495569, 0.663428, 0.852902, 1.04531, 2.66866},
//		 {-2.66866, -1.14832, -0.857439, -0.645281, -0.484628, -0.343723, -0.223633, -0.109949, 0, 0.109949, 0.223633, 0.343723, 0.484628, 0.645281, 0.857439, 1.14832, 2.66866},
//		 {-2.66866, -1.06559, -0.780849, -0.588439, -0.444865, -0.313567, -0.201217, -0.0968722, 0, 0.0968722, 0.201217, 0.313567, 0.444865, 0.588439, 0.780849, 1.06559, 2.66866}};

//    const double xedgesrec[] = {0, 0.159391, 0.325458, 0.50571, 0.714893, 0.99306, 1.5};
//    const double yedgesrec[][17] = {  {-2, -0.28565, -0.234684, -0.188907, -0.146792, -0.108034, -0.0704969, -0.0347907, 0, 0.0347907, 0.0704969, 0.108034, 0.146792, 0.188907, 0.234684, 0.28565, 2},
//    {-2, -0.59785, -0.533457, -0.478219, -0.426338, -0.376594, -0.322882, -0.201725, 0, 0.201725, 0.322882, 0.376594, 0.426338, 0.478219, 0.533457, 0.59785, 2},
//    {-2, -0.918596, -0.83284, -0.761122, -0.695203, -0.610057, -0.427864, -0.216374, 0, 0.216374, 0.427864, 0.610057, 0.695203, 0.761122, 0.83284, 0.918596, 2},
//    {-2, -1.24544, -1.12429, -1.02205, -0.846573, -0.626537, -0.4123, -0.203251, 0, 0.203251, 0.4123, 0.626537, 0.846573, 1.02205, 1.12429, 1.24544, 2},
//    {-2, -1.52347, -1.28481, -1.01808, -0.787063, -0.574962, -0.37873, -0.188297, 0, 0.188297, 0.37873, 0.574962, 0.787063, 1.01808, 1.28481, 1.52347, 2},
//    {-2, -1.42581, -1.07943, -0.834061, -0.635388, -0.460213, -0.299688, -0.146487, 0, 0.146487, 0.299688, 0.460213, 0.635388, 0.834061, 1.07943, 1.42581, 2}};


//      const double xedgesgen[] = {2.26533e-06, 0.365272, 0.810295, 2.65844};
//      const double yedgesgen[][9] = {  {-2.88991, -0.459206, -0.272229, -0.124844, 0, 0.124844, 0.272229, 0.459206, 2.88991},
//		 {-2.88991, -0.974765, -0.710339, -0.3465, 0, 0.3465, 0.710339, 0.974765, 2.88991},
//		 {-2.88991, -1.07042, -0.629711, -0.299683, 0, 0.299683, 0.629711, 1.07042, 2.88991}};

    const double xedgesgen[] = {0, 0.41, 0.90, 1.5};
    const double yedgesgen[][9] = {  {-2, -0.51, -0.31, -0.14, 0, 0.14, 0.31, 0.51, 2},
    {-2, -1.09, -0.80, -0.39, 0, 0.39, 0.80, 1.09, 2},
    {-2, -1.21, -0.72, -0.34, 0, 0.34, 0.72, 1.21, 2}};


  #endif // not 1d basis

  //const double logtau_for_binning = -3.61346; // rho, for drawfactor 5 on 1/fb
  const double logtau_for_binning = -4.86; // from optimization 
//  const double logtau_for_binning = -4.819; // from optimization 1btag

  const double reweighting_loweredge = 0;
  const double reweighting_upperedge = 1.1;

  const double pretty_kin_loweredge = 0;
  const double pretty_kin_upperedge = 2.5;
  
#endif



/// /////////////////
/// /////////////////

#ifdef BINNING_PT_ABSY_MANYYBINS

  // these need to be the names as they are called in the tuples
  const char* nameOfXAxisVarGen = "pt_ttbar_gen";
  const char* nameOfXAxisVarRec = "pt_ttbar";
  const char* nameOfXAxisVarShort = "pt";
  const char* labelOfXAxisVar = "p_{T t#bar{t}} [GeV/c]";
  const char* labelOfXAxisVar_noUnit = "p_{T t#bar{t}}";
  const char* labelOfXAxisVar_noUnit_gen = "p_{T t#bar{t}, gen}";
  const char* labelOfXAxisVar_noUnit_rec = "p_{T t#bar{t}, rec}";
  const char* unitOfXAxisVar = "GeV/c";
  
  const char* nameOfXAxisVarGen_ZPrime = "pt_ttbar";


//////////  const char* fileSuffix = "ptttbar/powheg_3mbins_manyybins_asymig_nosplit_overlap_flatinpresel";
  const char* fileSuffix = "";
//  #include "output/mttbar/powheg_3mbins_manyybins_asymig_nosplit_overlap/lincheck_fitresult.hpp" // WARNING needs changing
  
  #ifndef BUILD_1D_BASIS
    const int nbinsm = 6;
    const int nbinseta = 16;
    const int nbinsmafter = 3;
    const int nbinsetaafter = 8;  

    // flat in presel, powheg



   const double xedgesrec[] = {0.144058, 14.3285, 23.5888, 34.7599, 49.8997, 79.077, 735.087};
   const double yedgesrec[][17] = {  {-2.62378, -0.851155, -0.615277, -0.463098, -0.34083, -0.243487, -0.154541, -0.0747778, 0, 0.0747778, 0.154541, 0.243487, 0.34083, 0.463098, 0.615277, 0.851155, 2.62378},
		 {-2.62378, -0.87372, -0.624461, -0.464672, -0.347914, -0.245061, -0.15559, -0.0737283, 0, 0.0737283, 0.15559, 0.245061, 0.347914, 0.464672, 0.624461, 0.87372, 2.62378},
		 {-2.62378, -0.862438, -0.626822, -0.468083, -0.349488, -0.24165, -0.15559, -0.0739907, 0, 0.0739907, 0.15559, 0.24165, 0.349488, 0.468083, 0.626822, 0.862438, 2.62378},
		 {-2.62378, -0.865062, -0.627084, -0.459949, -0.339518, -0.237977, -0.15113, -0.0713669, 0, 0.0713669, 0.15113, 0.237977, 0.339518, 0.459949, 0.627084, 0.865062, 2.62378},
		 {-2.62378, -0.872408, -0.634169, -0.470707, -0.350275, -0.245586, -0.154016, -0.0742531, 0, 0.0742531, 0.154016, 0.245586, 0.350275, 0.470707, 0.634169, 0.872408, 2.62378},
		 {-2.62378, -0.873458, -0.630758, -0.473068, -0.348701, -0.24165, -0.155328, -0.0760897, 0, 0.0760897, 0.155328, 0.24165, 0.348701, 0.473068, 0.630758, 0.873458, 2.62378}};

//    const double xedgesrec[] = {0.147654, 14.1833, 23.565, 34.7197, 50.3067, 80.0031, 738.866};
//    const double yedgesrec[][17] = {  {-2.49826, -0.849657, -0.611573, -0.460928, -0.339263, -0.238833, -0.151145, -0.0724494, 0, 0.0724494, 0.151145, 0.238833, 0.339263, 0.460928, 0.611573, 0.849657, 2.49826},
//		 {-2.49826, -0.868144, -0.625314, -0.464426, -0.348507, -0.245079, -0.155641, -0.0754473, 0, 0.0754473, 0.155641, 0.245079, 0.348507, 0.464426, 0.625314, 0.868144, 2.49826},
//		 {-2.49826, -0.856402, -0.622316, -0.461678, -0.346009, -0.245329, -0.152643, -0.0721996, 0, 0.0721996, 0.152643, 0.245329, 0.346009, 0.461678, 0.622316, 0.856402, 2.49826},
//		 {-2.49826, -0.85965, -0.619068, -0.459679, -0.338014, -0.232338, -0.149146, -0.0714501, 0, 0.0714501, 0.149146, 0.232338, 0.338014, 0.459679, 0.619068, 0.85965, 2.49826},
//		 {-2.49826, -0.87464, -0.634557, -0.475418, -0.345759, -0.244829, -0.154142, -0.0741982, 0, 0.0741982, 0.154142, 0.244829, 0.345759, 0.475418, 0.634557, 0.87464, 2.49826},
//		 {-2.49826, -0.8599, -0.635057, -0.476667, -0.355752, -0.248327, -0.15789, -0.0779456, 0, 0.0779456, 0.15789, 0.248327, 0.355752, 0.476667, 0.635057, 0.8599, 2.49826}};

//    const double xedgesrec[] = {0.0615805, 15.6016, 25.3274, 36.6389, 52.1789, 81.039, 1057.21};
//    const double yedgesrec[][17] = {  {-2.7871, -0.866509, -0.627097, -0.467118, -0.344764, -0.242199, -0.153848, -0.073022, 0, 0.073022, 0.153848, 0.242199, 0.344764, 0.467118, 0.627097, 0.866509, 2.7871},
//		 {-2.7871, -0.874313, -0.628491, -0.470462, -0.346715, -0.242756, -0.15329, -0.074973, 0, 0.074973, 0.15329, 0.242756, 0.346715, 0.470462, 0.628491, 0.874313, 2.7871},
//		 {-2.7871, -0.878494, -0.630163, -0.469069, -0.343649, -0.24192, -0.152733, -0.0733007, 0, 0.0733007, 0.152733, 0.24192, 0.343649, 0.469069, 0.630163, 0.878494, 2.7871},
//		 {-2.7871, -0.883232, -0.637131, -0.476037, -0.349224, -0.245265, -0.155241, -0.0746943, 0, 0.0746943, 0.155241, 0.245265, 0.349224, 0.476037, 0.637131, 0.883232, 2.7871},
//		 {-2.7871, -0.886576, -0.639639, -0.472692, -0.35006, -0.245543, -0.15552, -0.074973, 0, 0.074973, 0.15552, 0.245543, 0.35006, 0.472692, 0.639639, 0.886576, 2.7871},
//		 {-2.7871, -0.879887, -0.633229, -0.472971, -0.346994, -0.242199, -0.153848, -0.073022, 0, 0.073022, 0.153848, 0.242199, 0.346994, 0.472971, 0.633229, 0.879887, 2.7871}};

//    const double xedgesrec[] = {0.0321804, 14.1329, 23.1159, 33.2423, 46.1997, 68.1401, 544.46};
//    const double yedgesrec[][17] = {  {-2.66866, -0.849433, -0.614591, -0.460877, -0.340254, -0.24098, -0.153448, -0.0731212, 0, 0.0731212, 0.153448, 0.24098, 0.340254, 0.460877, 0.614591, 0.849433, 2.66866},
//		 {-2.66866, -0.878255, -0.620729, -0.471285, -0.352529, -0.250053, -0.157984, -0.0728543, 0, 0.0728543, 0.157984, 0.250053, 0.352529, 0.471285, 0.620729, 0.878255, 2.66866},
//		 {-2.66866, -0.857973, -0.616193, -0.463279, -0.339186, -0.232707, -0.152113, -0.0728543, 0, 0.0728543, 0.152113, 0.232707, 0.339186, 0.463279, 0.616193, 0.857973, 2.66866},
//		 {-2.66866, -0.877988, -0.627134, -0.467548, -0.346392, -0.239645, -0.150779, -0.0720537, 0, 0.0720537, 0.150779, 0.239645, 0.346392, 0.467548, 0.627134, 0.877988, 2.66866},
//		 {-2.66866, -0.886527, -0.643947, -0.475554, -0.350128, -0.240446, -0.15665, -0.0752561, 0, 0.0752561, 0.15665, 0.240446, 0.350128, 0.475554, 0.643947, 0.886527, 2.66866},
//		 {-2.66866, -0.900138, -0.657023, -0.489965, -0.355732, -0.253255, -0.159586, -0.0749892, 0, 0.0749892, 0.159586, 0.253255, 0.355732, 0.489965, 0.657023, 0.900138, 2.66866}};

//    const double xedgesrec[] = {0, 16.6353, 27.1864, 39.9312, 60.4064, 107.207, 150};
//    const double yedgesrec[][17] = {  {-2, -1.13985, -0.850846, -0.651562, -0.487375, -0.347296, -0.223088, -0.108034, 0, 0.108034, 0.223088, 0.347296, 0.487375, 0.651562, 0.850846, 1.13985, 2},
//    {-2, -1.15725, -0.868546, -0.665295, -0.500803, -0.357673, -0.227055, -0.10956, 0, 0.10956, 0.227055, 0.357673, 0.500803, 0.665295, 0.868546, 1.15725, 2},
//    {-2, -1.16244, -0.874344, -0.670483, -0.507517, -0.363166, -0.233769, -0.109865, 0, 0.109865, 0.233769, 0.363166, 0.507517, 0.670483, 0.874344, 1.16244, 2},
//    {-2, -1.17098, -0.881058, -0.678723, -0.509042, -0.364387, -0.235295, -0.113527, 0, 0.113527, 0.235295, 0.364387, 0.509042, 0.678723, 0.881058, 1.17098, 2},
//    {-2, -1.16305, -0.872819, -0.669263, -0.501108, -0.355536, -0.228276, -0.111086, 0, 0.111086, 0.228276, 0.355536, 0.501108, 0.669263, 0.872819, 1.16305, 2},
//    {-2, -1.13985, -0.856034, -0.65614, -0.495614, -0.352179, -0.226139, -0.108339, 0, 0.108339, 0.226139, 0.352179, 0.495614, 0.65614, 0.856034, 1.13985, 2}};

//      const double xedgesgen[] = {0.0360248, 22.4537, 57.4939, 1009.84};
//      const double yedgesgen[][9] = {  {-2.88991, -0.832293, -0.473945, -0.216165, 0, 0.216165, 0.473945, 0.832293, 2.88991},
//		 {-2.88991, -0.851366, -0.488105, -0.219922, 0, 0.219922, 0.488105, 0.851366, 2.88991},
//		 {-2.88991, -0.824201, -0.469321, -0.214142, 0, 0.214142, 0.469321, 0.824201, 2.88991}};


//const double xedgesgen[] = {0.00514896, 22.3005, 57.5327, 1376.26};
//const double yedgesgen[][9] = {  {-3.46397, -0.912756, -0.504701, -0.222733, 0, 0.222733, 0.504701, 0.912756, 3.46397},
//		 {-3.46397, -0.910332, -0.505393, -0.223426, 0, 0.223426, 0.505393, 0.910332, 3.46397},
//		 {-3.46397, -0.868071, -0.480453, -0.212341, 0, 0.212341, 0.480453, 0.868071, 3.46397}};
//


    const double xedgesgen[] = {0, 23, 58, 150};
    const double yedgesgen[][9] = {  {-2, -0.95, -0.55, -0.25, 0, 0.25, 0.55, 0.95, 2},
    {-2, -0.95, -0.55, -0.25, 0, 0.25, 0.55, 0.95, 2},
    {-2, -0.92, -0.53, -0.24, 0, 0.24, 0.53, 0.92, 2}};


  #endif // not 1d basis

  //const double logtau_for_binning = -3.91369; // rho, for drawfactor 5 on 1/fb
//  const double logtau_for_binning = -3.901; // rho, for 4.7/fb
  const double logtau_for_binning = -4.22; // value from optimization
//  const double logtau_for_binning = -4.18; // value from optimization 1btag


  const double reweighting_loweredge = 0;
  const double reweighting_upperedge = 75;

  const double pretty_kin_loweredge = 0;
  const double pretty_kin_upperedge = 250;
#endif



/// /////////////////

#ifdef BINNING_M_ABSY_MANYYBINS

// these need to be the names as they are called in the tuples
  const char* nameOfXAxisVarGen = "mttbar_gen";
  const char* nameOfXAxisVarRec = "mttbar_rec";
  const char* nameOfXAxisVarShort = "m";
  const char* labelOfXAxisVar = "m_{t#bar{t}} [GeV/c^{2}]";
  const char* labelOfXAxisVar_noUnit = "m_{t#bar{t}}";
  const char* labelOfXAxisVar_noUnit_gen = "m_{t#bar{t}, gen}";
  const char* labelOfXAxisVar_noUnit_rec = "m_{t#bar{t}, rec}";
  const char* unitOfXAxisVar = "GeV/c^{2}";
  
  const char* nameOfXAxisVarGen_ZPrime = "m_ttbar";


///////////////  const char* fileSuffix = "mttbar/powheg_3mbins_manyybins_asymig_nosplit_overlap";
  const char* fileSuffix = "";
//  #include "output/mttbar/powheg_3mbins_manyybins_asymig_nosplit_overlap/lincheck_fitresult.hpp" // WARNING needs changing

  #ifndef BUILD_1D_BASIS
    const int nbinsm = 6;
    const int nbinseta = 16;
    const int nbinsmafter = 3;
    const int nbinsetaafter = 8;  
    
    // flat in presel powheg
    const double xedgesrec[] = {214.674, 322.426, 358.815, 398.736, 452.789, 547.47, 3747.54};
    const double yedgesrec[][17] = {  {-2.7871, -0.58111, -0.42559, -0.319959, -0.237461, -0.168062, -0.108139, -0.0523975, 0, 0.0523975, 0.108139, 0.168062, 0.237461, 0.319959, 0.42559, 0.58111, 2.7871},
		 {-2.7871, -0.696217, -0.513941, -0.388243, -0.290416, -0.204294, -0.130158, -0.0627097, 0, 0.0627097, 0.130158, 0.204294, 0.290416, 0.388243, 0.513941, 0.696217, 2.7871},
		 {-2.7871, -0.807144, -0.600899, -0.454855, -0.337239, -0.238297, -0.152733, -0.0716285, 0, 0.0716285, 0.152733, 0.238297, 0.337239, 0.454855, 0.600899, 0.807144, 2.7871},
		 {-2.7871, -0.928383, -0.694824, -0.528434, -0.394653, -0.278431, -0.178653, -0.085564, 0, 0.085564, 0.178653, 0.278431, 0.394653, 0.528434, 0.694824, 0.928383, 2.7871},
		 {-2.7871, -1.0421, -0.776486, -0.590586, -0.438411, -0.308532, -0.197048, -0.0939253, 0, 0.0939253, 0.197048, 0.308532, 0.438411, 0.590586, 0.776486, 1.0421, 2.7871},
		 {-2.7871, -1.15637, -0.858705, -0.648001, -0.47743, -0.336403, -0.209311, -0.0994995, 0, 0.0994995, 0.209311, 0.336403, 0.47743, 0.648001, 0.858705, 1.15637, 2.7871}};

//  const double xedgesrec[] = {213.434, 322.477, 358.825, 398.676, 452.102, 546.694, 4592.67};
//  const double yedgesrec[][17] = {  {-2.79228, -0.573534, -0.419121, -0.316086, -0.23483, -0.166699, -0.106944, -0.0513779, 0, 0.0513779, 0.106944, 0.166699, 0.23483, 0.316086, 0.419121, 0.573534, 2.79228},
//		 {-2.79228, -0.692205, -0.514058, -0.387568, -0.287884, -0.204674, -0.130679, -0.0636639, 0, 0.0636639, 0.130679, 0.204674, 0.287884, 0.387568, 0.514058, 0.692205, 2.79228},
//		 {-2.79228, -0.799987, -0.591963, -0.450115, -0.334515, -0.235947, -0.151062, -0.07232, 0, 0.07232, 0.151062, 0.235947, 0.334515, 0.450115, 0.591963, 0.799987, 2.79228},
//		 {-2.79228, -0.916425, -0.6869, -0.52048, -0.390639, -0.275877, -0.175634, -0.0851644, 0, 0.0851644, 0.175634, 0.275877, 0.390639, 0.52048, 0.6869, 0.916425, 2.79228},
//		 {-2.79228, -1.04068, -0.775136, -0.587774, -0.43755, -0.310222, -0.197693, -0.0938205, 0, 0.0938205, 0.197693, 0.310222, 0.43755, 0.587774, 0.775136, 1.04068, 2.79228},
//		 {-2.79228, -1.16019, -0.861138, -0.651438, -0.478596, -0.333398, -0.209421, -0.0999635, 0, 0.0999635, 0.209421, 0.333398, 0.478596, 0.651438, 0.861138, 1.16019, 2.79228}};

//    const double xedgesrec[] = {214.303, 322.647, 359.147, 399.704, 454.165, 550.921, 6008.07};
//    const double yedgesrec[][17] = {  {-2.7487, -0.580526, -0.423025, -0.3172, -0.237213, -0.167946, -0.108849, -0.0525002, 0, 0.0525002, 0.108849, 0.167946, 0.237213, 0.3172, 0.423025, 0.580526, 2.7487},
//		 {-2.7487, -0.696246, -0.515381, -0.390865, -0.289713, -0.205328, -0.133037, -0.0629452, 0, 0.0629452, 0.133037, 0.205328, 0.289713, 0.390865, 0.515381, 0.696246, 2.7487},
//		 {-2.7487, -0.803445, -0.601416, -0.453261, -0.338365, -0.240236, -0.153927, -0.0744898, 0, 0.0744898, 0.153927, 0.240236, 0.338365, 0.453261, 0.601416, 0.803445, 2.7487},
//		 {-2.7487, -0.922464, -0.692123, -0.525826, -0.39114, -0.276519, -0.175092, -0.08466, 0, 0.08466, 0.175092, 0.276519, 0.39114, 0.525826, 0.692123, 0.922464, 2.7487},
//		 {-2.7487, -1.0533, -0.785854, -0.594544, -0.441991, -0.311978, -0.20148, -0.0959297, 0, 0.0959297, 0.20148, 0.311978, 0.441991, 0.594544, 0.785854, 1.0533, 2.7487},
//		 {-2.7487, -1.17012, -0.861443, -0.649793, -0.476625, -0.334517, -0.2111, -0.099503, 0, 0.099503, 0.2111, 0.334517, 0.476625, 0.649793, 0.861443, 1.17012, 2.7487}};

//    const double xedgesrec[] = {250, 405.373, 460.422, 521.265, 601.666, 736.753, 1000};
//    const double yedgesrec[][17] = {  {-2, -0.737623, -0.55604, -0.427864, -0.323187, -0.230412, -0.147403, -0.072328, 0, 0.072328, 0.147403, 0.230412, 0.323187, 0.427864, 0.55604, 0.737623, 2},
//    {-2, -0.996112, -0.772719, -0.601818, -0.458688, -0.32807, -0.212711, -0.103151, 0, 0.103151, 0.212711, 0.32807, 0.458688, 0.601818, 0.772719, 0.996112, 2},
//    {-2, -1.13741, -0.877701, -0.683606, -0.520945, -0.375068, -0.242009, -0.116884, 0, 0.116884, 0.242009, 0.375068, 0.520945, 0.683606, 0.877701, 1.13741, 2},
//    {-2, -1.23202, -0.952776, -0.738844, -0.561534, -0.403755, -0.260625, -0.125735, 0, 0.125735, 0.260625, 0.403755, 0.561534, 0.738844, 0.952776, 1.23202, 2},
//    {-2, -1.31808, -1.01625, -0.793166, -0.604564, -0.434578, -0.278325, -0.134585, 0, 0.134585, 0.278325, 0.434578, 0.604564, 0.793166, 1.01625, 1.31808, 2},
//    {-2, -1.41391, -1.08767, -0.847183, -0.645153, -0.465402, -0.301519, -0.144351, 0, 0.144351, 0.301519, 0.465402, 0.645153, 0.847183, 1.08767, 1.41391, 2}};

//      const double xedgesgen[] = {276.38, 406.061, 499.102, 4393.22};
//      const double xedgesgen[] = {276.38, 406.061, 499.102, 1000.}; // MARCO
//      const double yedgesgen[][9] = {  {-3.47643, -0.529113, -0.300016, -0.135233, 0, 0.135233, 0.300016, 0.529113, 3.47643},
//		 {-3.47643, -0.971315, -0.600728, -0.281939, 0, 0.281939, 0.600728, 0.971315, 3.47643},
//		 {-3.47643, -1.29045, -0.783588, -0.368154, 0, 0.368154, 0.783588, 1.29045, 3.47643}};

    const double xedgesgen[] = {300, 420, 512, 800};
    const double yedgesgen[][9] = {  {-2, -0.60, -0.36, -0.16, 0, 0.16, 0.36, 0.60, 2},
    {-2, -1.00, -0.61, -0.29, 0, 0.29, 0.61, 1.00, 2},
    {-2, -1.30, -0.78, -0.37, 0, 0.37, 0.78, 1.30, 2}};
    
    
  #endif // not 1d basis
    const double logtau_for_binning = -4.76; // value obtained from optimization
//    const double logtau_for_binning = -4.721; // value obtained from optimization for 1btag


 
  const double reweighting_loweredge = 340;
  const double reweighting_upperedge = 650;
  
  const double pretty_kin_loweredge = 0;
  const double pretty_kin_upperedge = 1000;
#endif


    


/// /////////////////
/// /////////////////



// 1d bins
const int nbinsm1d = 1;
const int nbinsmafter1d = 1;
const int nbinseta1d = 16;
const int nbinsetaafter1d = 8;


//const double mbinedges1d[] = {0, 900};
//const double mbinedgesafter1d[] = {0, 900}; 

//const double mbinedges1d[] = {214.303, 6008.07};

//const double mbinedges1d[] = {214.674, 3747.54};//m_ttbar
//const double mbinedges1d[] = {213.434, 4592.67};//m_ttbar 1btag
const double mbinedges1d[] = {1.52767e-06, 2.48754};//y_ttbar
//const double mbinedges1d[] = {1.90124e-07, 2.33337};//y_ttbar 1btag
//const double mbinedges1d[] = {0.0615805, 1057.21};//pT_ttbar
//const double mbinedges1d[] = {0.147654, 738.866};//pT_ttbar 1btag

//const double mbinedgesafter1d[] = {276.38, 1000.};

const double mbinedgesafter1d[] = {300, 800.};//m_ttbar
//const double mbinedgesafter1d[] = {0, 1.5};//y_ttbar
//const double mbinedgesafter1d[] = {0, 150.};//pT_ttbar



// WARNING needs changing below and in ifdef as well


  const double etabinedges1d[] = {-2.7871, -0.877658, -0.632114, -0.47102, -0.346436, -0.243035, -0.154127, -0.0738581, 0, 0.0738581, 0.154127, 0.243035, 0.346436, 0.47102, 0.632114, 0.877658, 2.7871};
//  const double etabinedges1d[] = { -2.79228, -0.871749, -0.627983, -0.467706, -0.34345, -0.24209, -0.153017, -0.0734369, 0, 0.0734369, 0.153017, 0.24209, 0.34345, 0.467706, 0.627983, 0.871749, 2.79228};//1btag
//  const double etabinedges1d[] = { -2.49826, -0.860649, -0.623315, -0.465925, -0.344759, -0.242331, -0.153143, -0.0736986, 0, 0.0736986, 0.153143, 0.242331, 0.344759, 0.465925, 0.623315, 0.860649, 2.49826};//1btag

//  const double etabinedges1d[] = {-2.7487, -0.876835, -0.632201, -0.470028, -0.345512, -0.24326, -0.154202, -0.0742149, 0, 0.0742149, 0.154202, 0.24326, 0.345512, 0.470028, 0.632201, 0.876835, 2.7487};
//const double etabinedges1d[] = {-2, -1.15664, -0.867936, -0.665295, -0.500497, -0.356757, -0.228886, -0.11017, 0, 0.11017, 0.228886, 0.356757, 0.500497, 0.665295, 0.867936, 1.15664, 2}; 
// flat in presel
//const double etabinedges1dafter[] = {-2, -0.94, -0.54, -0.25, 0, 0.25, 0.54, 0.94, 2};
//  const double etabinedges1dafter[] = {  -2, -0.943762, -0.540307, -0.246331, 0, 0.246331, 0.540307, 0.943762, 2};
//  const double etabinedges1dafter[] = { -3.47643, -0.914302, -0.507212, -0.223882, 0, 0.223882, 0.507212, 0.914302, 3.47643};
  const double etabinedges1dafter[] = {  -2, -0.943762, -0.540307, -0.246331, 0, 0.246331, 0.540307, 0.943762, 2};


const double* xedgesrec1d = mbinedges1d;
const double* xedgesgen1d = mbinedgesafter1d;

  const double yedgesrec1d[][17] = {-2.7871, -0.877658, -0.632114, -0.47102, -0.346436, -0.243035, -0.154127, -0.0738581, 0, 0.0738581, 0.154127, 0.243035, 0.346436, 0.47102, 0.632114, 0.877658, 2.7871};
//  const double yedgesrec1d[][17] = { -2.79228, -0.871749, -0.627983, -0.467706, -0.34345, -0.24209, -0.153017, -0.0734369, 0, 0.0734369, 0.153017, 0.24209, 0.34345, 0.467706, 0.627983, 0.871749, 2.79228};//1btag
//  const double yedgesrec1d[][17] = {  -2.49826, -0.860649, -0.623315, -0.465925, -0.344759, -0.242331, -0.153143, -0.0736986, 0, 0.0736986, 0.153143, 0.242331, 0.344759, 0.465925, 0.623315, 0.860649, 2.49826};//1btag

//  const double yedgesrec1d[][17] = {-2.7487, -0.876835, -0.632201, -0.470028, -0.345512, -0.24326, -0.154202, -0.0742149, 0, 0.0742149, 0.154202, 0.24326, 0.345512, 0.470028, 0.632201, 0.876835, 2.7487};
//const double yedgesrec1d[][17] = {  {-2, -1.15664, -0.867936, -0.665295, -0.500497, -0.356757, -0.228886, -0.11017, 0, 0.11017, 0.228886, 0.356757, 0.500497, 0.665295, 0.867936, 1.15664, 2}};
//  const double yedgesgen1d[][9] = {  {-3.47643, -0.914302, -0.507212, -0.223882, 0, 0.223882, 0.507212, 0.914302, 3.47643}};
//  const double yedgesgen1d[][9] = {  {-2, -0.943762, -0.540307, -0.246331, 0, 0.246331, 0.540307, 0.943762, 2}};
  const double yedgesgen1d[][9] = {  {-2, -0.943762, -0.540307, -0.246331, 0, 0.246331, 0.540307, 0.943762, 2}};
 

const double logtau_for_binning_1d = -5.06; // value obtained from optimization
//const double logtau_for_binning_1d = -5.04; // value obtained from optimization 1btag

  
#ifdef BUILD_1D_BASIS

  const double yedgesrec[][17] = {{-2.7871, -0.877658, -0.632114, -0.47102, -0.346436, -0.243035, -0.154127, -0.0738581, 0, 0.0738581, 0.154127, 0.243035, 0.346436, 0.47102, 0.632114, 0.877658, 2.7871}};
//  const double yedgesrec[][17] = {  {-2.79228, -0.871749, -0.627983, -0.467706, -0.34345, -0.24209, -0.153017, -0.0734369, 0, 0.0734369, 0.153017, 0.24209, 0.34345, 0.467706, 0.627983, 0.871749, 2.79228}};//1btag
//  const double yedgesrec[][17] = { {-2.49826, -0.860649, -0.623315, -0.465925, -0.344759, -0.242331, -0.153143, -0.0736986, 0, 0.0736986, 0.153143, 0.242331, 0.344759, 0.465925, 0.623315, 0.860649, 2.49826}};//1btag


//  const double yedgesrec[][17] = {  {-2.7487, -0.876835, -0.632201, -0.470028, -0.345512, -0.24326, -0.154202, -0.0742149, 0, 0.0742149, 0.154202, 0.24326, 0.345512, 0.470028, 0.632201, 0.876835, 2.7487}};
//const double yedgesrec[][17] = {  {-2, -1.15664, -0.867936, -0.665295, -0.500497, -0.356757, -0.228886, -0.11017, 0, 0.11017, 0.228886, 0.356757, 0.500497, 0.665295, 0.867936, 1.15664, 2}};
//  const double yedgesgen[][9] = {  {-3.47643, -0.914302, -0.507212, -0.223882, 0, 0.223882, 0.507212, 0.914302, 3.47643}};
//    const double yedgesgen[][9] = {  {-2, -0.943762, -0.540307, -0.246331, 0, 0.246331, 0.540307, 0.943762, 2}};
  const double yedgesgen[][9] = {  {-2, -0.943762, -0.540307, -0.246331, 0, 0.246331, 0.540307, 0.943762, 2}};
  
  
  const int nbinsm = nbinsm1d;
  const int nbinseta = nbinseta1d;
  const int nbinsmafter = nbinsmafter1d;
  const int nbinsetaafter = nbinsetaafter1d;  
  const double* xedgesrec = mbinedges1d;
  const double* xedgesgen = mbinedgesafter1d;
  
  const char* dimstring = "1d";
#else
  const char* dimstring = "";
#endif

// general stuff

const int nbins = nbinsm * nbinseta;
const int nbinsafter = nbinsmafter * nbinsetaafter;

const int nbins1d = nbinsm1d * nbinseta1d;
const int nbinsafter1d = nbinsmafter1d * nbinsetaafter1d;

typedef MyH2<nbinsmafter, nbinsetaafter> H2gen;
typedef MyH2<nbinsm, nbinseta> H2rec;
typedef MyH2<nbinsmafter1d, nbinsetaafter1d> H2gen1d;
typedef MyH2<nbinsm1d, nbinseta1d> H2rec1d;


/// less important flags
bool vary_migmatrix_for_each_unfolding = false; // dont change this here, gets changed in appropriate program

// decides which half of data goes to training and which goes to testing
// doesnt work eg for random split - be careful.
const bool invert_split = false;
// overrides other split variables; makes it use modulo for splitting datasets
const bool modulo_split = false; 
const bool force_no_seleffsplit = true; 
const bool force_no_linchecksamplesplit = false; 
const bool force_no_migsplit = false; 
const bool look_at_samemod_split = false; 
// when true: keep reweighting value constant within gen bins of m for continuous reweighting
const bool discont = false; 

// this allows to symmetrize migration in the sensitive variable
// so mig(-gen -> -rec) = mig(+gen -> +rec)
const bool symmetrize_migmatrix = false;
const bool symmetrize_seleff = false;
  
#endif // BINNING_HPP
